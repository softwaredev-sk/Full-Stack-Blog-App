

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post Post[]
  comments Comment[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@id([userId, credentialID])
// }


model Category {
  id String @id @default(cuid()) @map("_id")
  slug String @unique
  title String
  img String?
  order Int @default(0)
  Posts Post[]
}

model Post {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postUpdatedAt DateTime @default(now())
  slug String @unique
  title String
  desc String
  img String?
  views Int @default(0)
  editorPick Boolean @default(false)
  catSlug String
  cat Category @relation(fields: [catSlug], references: [slug] )
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  comments Comment[]
  edited Boolean @default(false)
}

model Comment {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  desc String
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  postSlug String
  post Post @relation(fields: [postSlug], references: [slug])
  edited Boolean @default(false)
}

model Contactme {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  userEmail String @default("NOT LOGGED IN")
  email String
  subject String
  content String
}

model Bloginfo {
  id String @id @default(cuid()) @map("_id")
  fieldname String
  info String
}